#include<stdio.h>
#define count 10
struct node{
int key;
struct node *left,*right;
};
struct node *newnode(int);
struct node *insert(struct node *node,int );
int inorder(struct node *root);
int preorder(struct node *root);
int postorder(struct node *root);
struct node *deletenode(struct node *root,int data)
{
  if(root==NULL)
    {
        return root;
    }
    if(data <root->key)
    {
        root->left = deletenode(root->left,data);
    }
    else if(data > root->key)
    {
        root->right = deletenode(root->right,data);
    }
    else
    {
        if(root->left == NULL)
        {
            struct node *temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL)
        {
           struct node *temp = root->left;
           free(root);
           return temp;
        }
    }
    print2D(root);
    return root;
}
void print2DUtil(struct node *root,int space)
{
    int i;
    if(root==NULL)
        return 0;
    space+=count;
    print2DUtil(root->right,space);
    printf("\n");
    for(i=count;i<space;i++)
        printf(" ");
        printf("%d\n",root->key);
    print2DUtil(root->left,space);

}
void print2D(struct node *root)
{
    print2DUtil(root,0);
}
main()
{
    struct node *root=NULL;
    int n,data,i;
    printf("enter the number of elements to be added\n");
    scanf("%d",&n);
    printf("enter the values\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&data);
        root=insert(root,data);
    }
    print2D(root);
    printf("inorder sequence\n");
    inorder(root);
    printf("\npreorder sequence\n");
    preorder(root);
    printf("\npostorder sequence\n");
    postorder(root);
    deletenode(root,5);
}
struct node *newnode(int item)
{
    struct node *temp=(struct node*)malloc(sizeof(struct node));
    temp->key=item;
    temp->left=temp->right=NULL;
    return temp;
}
struct node *insert(struct node *node,int key)
{
    if(node==NULL)
        return newnode(key);
    if(key<node->key)
        node->left=insert(node->left,key);
    else
        node->right=insert(node->right,key);
    return node;
}
int inorder(struct node *root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d\t",root->key);
        inorder(root->right);
    }
}
int preorder(struct node *root)
{
    if(root!=NULL)
    {
        printf("%d\t",root->key);
        preorder(root->left);
        preorder(root->right);
    }
}
int postorder(struct node *root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d\t",root->key);
    }
}
